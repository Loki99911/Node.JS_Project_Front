{"version":3,"file":"static/js/18.72eaabfc.chunk.js","mappings":"sQAoBMA,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,KAAMF,EAAAA,KACHG,IAAI,GACJC,IAAI,IACJC,QAAQ,mIACRC,WAEHC,MAAOP,EAAAA,KAAYQ,KAAK,CACtBN,KAAM,QACNO,OAAQ,CAAEC,EAAG,OAAQC,EAAG,OACxBH,KAAM,SAAAI,GACJ,MAAO,2BAA2BJ,KAAKI,EACxC,IAEHC,SAAUb,EAAAA,KACPG,IAAI,EAAG,0BACPC,IAAI,GAAI,2BACRC,QAAQ,qBAAY,yDACpBA,QAAQ,yCAAsB,2BAC9BC,SAAS,6BAqJd,EAlJqB,SAAAQ,GACnB,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,4BACE,SAAC,KAAD,CACEC,cAAe,CACbf,KAAK,GACLK,MAAM,GACNM,SAAU,IAEZK,iBAAkBnB,EAClBoB,SAAU,SAACC,EAAQC,GACjBN,GACEO,EAAAA,EAAAA,IAAO,CACLpB,KAAMkB,EAAOlB,KAAKqB,OAClBhB,MAAOa,EAAOb,MACdM,SAAUO,EAAOP,SAASU,UAG9BF,EAAQG,eAAc,GACtBH,EAAQI,WACT,EAjBH,SAmBG,SAAAX,GAAK,OACJ,UAAC,KAAD,YACE,SAAC,KAAD,4BACA,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,WACE,SAAC,KAAD,CACEY,OAAOC,EAAAA,EAAAA,GAASb,EAAMc,OAAO1B,KAAMY,EAAMM,OAAOlB,MADlD,UAGE,gBAAK2B,KAAI,UAAKC,EAAAA,EAAL,iBAGZhB,EAAMM,OAAOlB,OACZ,SAAC,KAAD,WACE,0BACE,gBACE2B,KAAI,UAAKC,EAAAA,GAAL,QAAWH,EAAAA,EAAAA,GACbb,EAAMc,OAAO1B,KACbY,EAAMM,OAAOlB,cAMvB,SAAC,KAAD,CACE6B,KAAK,OACL7B,KAAK,OACL8B,YAAY,OACZN,OAAOC,EAAAA,EAAAA,GAASb,EAAMc,OAAO1B,KAAMY,EAAMM,OAAOlB,MAChD+B,aAAaN,EAAAA,EAAAA,GACXb,EAAMc,OAAO1B,KACbY,EAAMM,OAAOlB,KACb,kCAIN,UAAC,KAAD,YACE,SAAC,KAAD,WACE,gBAAKgC,MAAMP,EAAAA,EAAAA,GAASb,EAAMc,OAAOrB,MAAOO,EAAMM,OAAOb,OAArD,UACE,gBAAKsB,KAAI,UAAKC,EAAAA,EAAL,gBAGZhB,EAAMM,OAAOb,QACZ,SAAC,KAAD,WACE,0BACE,gBACEsB,KAAI,UAAKC,EAAAA,GAAL,QAAWH,EAAAA,EAAAA,GACbb,EAAMc,OAAOrB,MACbO,EAAMM,OAAOb,eAMvB,SAAC,KAAD,CACEwB,KAAK,QACL7B,KAAK,QACL8B,YAAY,QACZN,OAAOC,EAAAA,EAAAA,GAASb,EAAMc,OAAOrB,MAAOO,EAAMM,OAAOb,OACjD0B,aAAaN,EAAAA,EAAAA,GACXb,EAAMc,OAAOrB,MACbO,EAAMM,OAAOb,MACb,kCAIN,UAAC,KAAD,YACE,SAAC,KAAD,WACE,SAAC,KAAD,CACEmB,OAAOC,EAAAA,EAAAA,GACLb,EAAMc,OAAOf,SACbC,EAAMM,OAAOP,UAHjB,UAME,gBAAKgB,KAAI,UAAKC,EAAAA,EAAL,mBAGZhB,EAAMM,OAAOP,WACZ,SAAC,KAAD,WACE,0BACE,gBACEgB,KAAI,UAAKC,EAAAA,GAAL,QAAWH,EAAAA,EAAAA,GACbb,EAAMc,OAAOf,SACbC,EAAMM,OAAOP,kBAMvB,SAAC,KAAD,CACEkB,KAAK,WACL7B,KAAK,WACL8B,YAAY,WACZN,OAAOC,EAAAA,EAAAA,GAASb,EAAMc,OAAOf,SAAUC,EAAMM,OAAOP,UACpDoB,aAAaN,EAAAA,EAAAA,GACXb,EAAMc,OAAOf,SACbC,EAAMM,OAAOP,SACb,8BAGHC,EAAMM,OAAOP,WACZ,SAAC,KAAD,CACEsB,GAAG,WACHT,OAAOC,EAAAA,EAAAA,GACLb,EAAMc,OAAOf,SACbC,EAAMM,OAAOP,UAJjB,SAOGC,EAAMc,OAAOf,UAAY,8BAKlC,SAAC,KAAD,CAAYkB,KAAK,SAAjB,wBAjHE,KAqHR,SAAC,KAAD,CAAUK,GAAG,UAAb,uBAGL,EC7KD,EAViB,WACf,OACE,+BACE,SAACC,EAAA,EAAD,WACE,SAAC,EAAD,OAIP,C","sources":["components/FormRegister/FormRegister.jsx","pages/Register/Register.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { signUp } from 'redux/auth/authOperations';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  BoxForInput,\n  IconForInput,\n  FlagForInput,\n  InputForAuth,\n  FormButton,\n  FormForAuth,\n  TitleForForm,\n  ErrorMessage,\n  BoxForForm,\n  LinkAuth,\n  SvgAuth,\n} from './style.jsx';\nimport SVG from 'images/sprite.svg';\nimport { getColor } from 'utils/formikColors.js';\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(1)\n    .max(16)\n    .matches(/^[a-zA-Zа-яА-Я1-9]+(([' -][a-zA-Zа-яА-Я1-9 ])?[a-zA-Zа-яА-Я1-9]*)*$/)\n    .required(),\n\n  email: Yup.mixed().test({\n    name: 'email',\n    params: { a: 'test', b: 'qwe' },\n    test: value => {\n      return /\\w+[^\\s]\\w+@\\w+\\.\\w{1,5}/.test(value);\n    },\n  }),\n  password: Yup.string()\n    .min(6, 'Your password is short')\n    .max(16, 'Enter a valid Password*')\n    .matches(/[A-ZА-Я]/, 'Your password is little secure. Add uppercase letter!')\n    .matches(/^[a-zа-я1-9A-ZА-Я]/, 'Enter a valid Password*')\n    .required('Enter a valid Password*'),\n});\n\nconst FormRegister = props => {\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: ``,\n          email: ``,\n          password: '',\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={(values, actions) => {\n          dispatch(\n            signUp({\n              name: values.name.trim(),\n              email: values.email,\n              password: values.password.trim(),\n            })\n          );\n          actions.setSubmitting(false);\n          actions.resetForm();\n        }}\n      >\n        {props => (\n          <FormForAuth>\n            <TitleForForm>Registration</TitleForForm>\n            <BoxForForm>\n              <BoxForInput>\n                <IconForInput>\n                  <SvgAuth\n                    color={getColor(props.errors.name, props.values.name)}\n                  >\n                    <use href={`${SVG}#person`}></use>\n                  </SvgAuth>\n                </IconForInput>\n                {props.values.name && (\n                  <FlagForInput>\n                    <svg>\n                      <use\n                        href={`${SVG}${getColor(\n                          props.errors.name,\n                          props.values.name\n                        )}`}\n                      ></use>\n                    </svg>\n                  </FlagForInput>\n                )}\n                <InputForAuth\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  color={getColor(props.errors.name, props.values.name)}\n                  bordercolor={getColor(\n                    props.errors.name,\n                    props.values.name,\n                    'rgba(255, 255, 255, 0.3)'\n                  )}\n                />\n              </BoxForInput>\n              <BoxForInput>\n                <IconForInput>\n                  <svg fill={getColor(props.errors.email, props.values.email)}>\n                    <use href={`${SVG}#email`}></use>\n                  </svg>\n                </IconForInput>\n                {props.values.email && (\n                  <FlagForInput>\n                    <svg>\n                      <use\n                        href={`${SVG}${getColor(\n                          props.errors.email,\n                          props.values.email\n                        )}`}\n                      ></use>\n                    </svg>\n                  </FlagForInput>\n                )}\n                <InputForAuth\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  color={getColor(props.errors.email, props.values.email)}\n                  bordercolor={getColor(\n                    props.errors.email,\n                    props.values.email,\n                    'rgba(255, 255, 255, 0.3)'\n                  )}\n                />\n              </BoxForInput>\n              <BoxForInput>\n                <IconForInput>\n                  <SvgAuth\n                    color={getColor(\n                      props.errors.password,\n                      props.values.password\n                    )}\n                  >\n                    <use href={`${SVG}#password`}></use>\n                  </SvgAuth>\n                </IconForInput>\n                {props.values.password && (\n                  <FlagForInput>\n                    <svg>\n                      <use\n                        href={`${SVG}${getColor(\n                          props.errors.password,\n                          props.values.password\n                        )}`}\n                      ></use>\n                    </svg>\n                  </FlagForInput>\n                )}\n                <InputForAuth\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  color={getColor(props.errors.password, props.values.password)}\n                  bordercolor={getColor(\n                    props.errors.password,\n                    props.values.password,\n                    'rgba(255, 255, 255, 0.3)'\n                  )}\n                />\n                {props.values.password && (\n                  <ErrorMessage\n                    id=\"feedback\"\n                    color={getColor(\n                      props.errors.password,\n                      props.values.password\n                    )}\n                  >\n                    {props.errors.password || 'Password is secure'}\n                  </ErrorMessage>\n                )}\n              </BoxForInput>\n            </BoxForForm>\n            <FormButton type=\"submit\">Register</FormButton>\n          </FormForAuth>\n        )}\n      </Formik>\n      <LinkAuth to=\"/signin\">Sign in</LinkAuth>\n    </div>\n  );\n};\n\nexport default FormRegister;","import AuthPages from 'components/AuthPages/AuthPages';\nimport FormRegister from 'components/FormRegister/FormRegister';\n\nconst Register = () => {\n  return (\n    <>\n      <AuthPages>\n        <FormRegister />\n      </AuthPages>\n    </>\n  );\n};\n\nexport default Register;\n"],"names":["SignupSchema","Yup","shape","name","min","max","matches","required","email","test","params","a","b","value","password","props","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","signUp","trim","setSubmitting","resetForm","color","getColor","errors","href","SVG","type","placeholder","bordercolor","fill","id","to","AuthPages"],"sourceRoot":""}