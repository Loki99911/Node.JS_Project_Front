{"version":3,"file":"static/js/545.602a14b4.chunk.js","mappings":"gNAGaA,EAAiBC,EAAAA,GAAAA,IAAH,0CAIdC,EAAYD,EAAAA,GAAAA,IAAH,0zBACLE,EAAAA,EAAAA,MAAAA,MAMN,SAAAC,GAAC,OAAIA,EAAED,MAAME,OAAOC,cAAnB,IAEU,SAAAF,GAAC,OAAIA,EAAED,MAAME,OAAOE,aAAnB,GAUVP,GAUM,SAAAI,GAAC,OAAIA,EAAED,MAAMK,MAAMC,IAAlB,IACP,SAAAL,GAAC,OAAIA,EAAED,MAAME,OAAOC,cAAnB,IAcDI,EAAUT,EAAAA,GAAAA,IAAH,+JAQPU,EAAWV,EAAAA,GAAAA,GAAH,4a,6BCjDRW,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,SAACF,EAAD,WACE,UAAC,KAAD,CAAMG,GAAE,kBAAaD,EAAKE,QAAUC,QAASC,EAAAA,EAA7C,WACE,SAACP,EAAD,CACEQ,IAAKL,EAAKM,aAAeN,EAAKM,aAAe,CAAEC,QAAAA,GAC/CC,IAAKR,EAAKS,WAEZ,SAACpB,EAAD,CAAW,kBAAiBW,EAAKE,OAAjC,SAA0CF,EAAKS,UAC9CT,EAAKS,QAAQC,OAAS,KACrB,SAACvB,EAAD,WACE,uBAAIa,EAAKS,gBAMpB,C,wJCzBYE,E,QAAWvB,GAAAA,GAAH,wU,SCiCrB,EA1ByB,WACrB,IAAMwB,GAAWC,EAAAA,EAAAA,MACTC,GAAiBC,EAAAA,EAAAA,MAAjBD,aACFE,GAAiBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC7BC,GAAYF,EAAAA,EAAAA,KAAY,SAAAG,GAAK,OAAIA,EAAMC,aAAaC,kBAAvB,IAWnC,OARAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,CAAEC,SAAUX,EAAcY,MAAO,IAE5Cd,EADiB,aAAjBE,GACSa,EAAAA,EAAAA,IAA4B,CAAEF,SAAU,UAAWC,MAAO,MAE1DC,EAAAA,EAAAA,IAA4BH,GAE5C,GAAE,CAACZ,EAAUE,IACPK,GACH,SAACS,EAAA,EAAD,KAEA,SAACjB,EAAD,UACKK,EAAea,MAAM,EAAG,GAAGC,KAAI,SAAA9B,GAAI,OAChC,SAACD,EAAA,EAAD,CAAUC,KAAMA,GAAWA,EAAKE,OADA,KAK/C,C","sources":["components/CardMeal/CardMeal.styled.jsx","components/CardMeal/CardMeal.jsx","pages/CategoriesByName/CategoriesByName.styled.jsx","pages/CategoriesByName/CategoriesByName.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { theme } from 'utils/theme';\n\nexport const TooltipWrapper = styled.div`\n  display: none;\n`;\n\nexport const CardTitle = styled.div`\n  font-family: ${theme.fonts.main};\n  font-style: normal;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 20px;\n  letter-spacing: -0.24px;\n  color: ${p => p.theme.colors.mainHeaderText};\n  padding: 16px;\n  background-color: ${p => p.theme.colors.recipeBlockBg};\n  position: absolute;\n  top: 245px;\n  left: 18px;\n  border-radius: 8px;\n  width: calc(100% - 36px);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  :hover + ${TooltipWrapper} {\n    width: 100%;\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    max-width: 100%;\n    margin-top: -25px;\n    border-radius: 5px;\n    padding: 4px;\n    font-family: ${p => p.theme.fonts.main};\n    color: ${p => p.theme.colors.mainHeaderText};\n    background-color: #8baa36;\n\n    p {\n      width: 100%;\n      padding: 5px;\n    }\n\n    @media (min-width: 1440px) {\n      margin-top: 8px;\n    }\n  }\n`;\n\nexport const CardImg = styled.img`\n  height: 323px;\n  width: 100%;\n  object-fit: cover;\n  border-radius: 8px;\n  transition: all 1000ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const CardDish = styled.li`\n  width: 343px;\n  height: 323px;\n  border-radius: 8px;\n  position: relative;\n\n  @media (min-width: 768px) {\n    width: calc((100% - 32px) / 2);\n  }\n\n  @media (min-width: 1440px) {\n    width: calc((100% - 42px) / 4);\n  }\n\n  a {\n    display: block;\n    overflow: hidden;\n    border-radius: 8px;\n\n    :hover img {\n      transform: scale(1.25);\n      filter: contrast(130%);\n    }\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport {\n  CardImg,\n  CardTitle,\n  CardDish,\n  TooltipWrapper,\n} from './CardMeal.styled';\nimport NoImage from '../../images/default.jpg';\nimport { scrollToTop } from 'utils/scrollUp';\n\nexport const CardMeal = ({ meal }) => {\n  return (\n    <CardDish>\n      <Link to={`/recipe/${meal.idMeal}`} onClick={scrollToTop}>\n        <CardImg\n          src={meal.strMealThumb ? meal.strMealThumb : { NoImage }}\n          alt={meal.strMeal}\n        />\n        <CardTitle data-tooltip-id={meal.idMeal}>{meal.strMeal}</CardTitle>\n        {meal.strMeal.length > 30 && (\n          <TooltipWrapper>\n            <p>{meal.strMeal}</p>\n          </TooltipWrapper>\n        )}\n      </Link>\n    </CardDish>\n  );\n};\n","import styled from 'styled-components';\n\nexport const RowTable = styled.ul`\n  \n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n  margin-bottom: 100px;\n  margin-top: 32px;\n  gap: 28px;\n\n  @media (min-width: 768px) {\n    gap: 32px;\n    margin-bottom: 200px;\n    margin-top: 50px;\n  }\n\n  @media (min-width: 1440px) {\n    gap: 14px;\n    row-gap: 100px;\n    \n  }\n`;\n","import { CardMeal } from 'components/CardMeal/CardMeal';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { getLimitedRecipesByCategory } from 'redux/outerRecipes/outerRecipesOperations';\nimport { getLimitedRecipes } from 'redux/outerRecipes/outerRecipesSelectors';\nimport { RowTable } from './CategoriesByName.styled';\n\nconst CategoriesByName = () => {\n    const dispatch = useDispatch();\n    const { categoryName } = useParams();\n    const limitedRecipes = useSelector(getLimitedRecipes);\n    const isPending = useSelector(state => state.outerRecipes.isCategoryFetching);\n\n\n    useEffect(() => {\n        const params = { category: categoryName, limit: 12 };\n        if (categoryName === 'desserts') {\n            dispatch(getLimitedRecipesByCategory({ category: 'dessert', limit: 12 }));\n        } else {\n            dispatch(getLimitedRecipesByCategory(params));\n        }\n    }, [dispatch, categoryName]);\n    return isPending ? (\n        <Loader />\n    ) : (\n        <RowTable>\n            {limitedRecipes.slice(0, 8).map(meal => (\n                <CardMeal meal={meal} key={meal.idMeal} />\n            ))}\n        </RowTable>\n    );\n};\n\nexport default CategoriesByName;\n"],"names":["TooltipWrapper","styled","CardTitle","theme","p","colors","mainHeaderText","recipeBlockBg","fonts","main","CardImg","CardDish","CardMeal","meal","to","idMeal","onClick","scrollToTop","src","strMealThumb","NoImage","alt","strMeal","length","RowTable","dispatch","useDispatch","categoryName","useParams","limitedRecipes","useSelector","getLimitedRecipes","isPending","state","outerRecipes","isCategoryFetching","useEffect","params","category","limit","getLimitedRecipesByCategory","Loader","slice","map"],"sourceRoot":""}